
#' Thiel's T for non-nested data structure
#'
#' @param Count Case counts, integers
#' @param Population Population at risk, integers
#' @param rates If `Count` is not provided, then `rates` must be provided (`Count = rates * Population`).
#' @param total If `total = TRUE`, Theil's index will be returned. Each unit contributes to Theil's index; if `total = FALSE`, all of the elements that sum to Theil's index will be returned.
#'
#' @return
#' ### theil2
#'
#' If `total = TRUE` (the default), `theil2` returns Theil's index as a numeric value. Else, `theil2` returns a vector of values that sum to Theil's index.
#' 
#' @examples
#'
#' Count <- c(10, 12, 3, 111)
#' Pop <- c(1000, 1200, 4000, 9000)
#' theil2(Count, Pop)
#' theil2(Count, Pop, total = FALSE)
#' 
#' @export
#' @rdname theil
theil2 <- function(Count, Population, rates, total = TRUE) {
    if (missing(Count)) Count <- rates * Population
    omega = Count / sum(Count)
    eta = Population / sum( Population )
    T = omega * log (omega / eta)
    T[is.na(T)] <- 0
    if (total) T = sum( T )
    return (Theil = T)
}



#' Theil's inequality index
#' 
#' @description Calculates Theil's entropy-based inequality index
#' @param x A fitted `surveil` model, from \code{\link[surveil]{stan_rw}}; or, a list of fitted `surveil` models, where each model represents a different geographic area (e.g., states).
#' 
#' @details
#'
#' Theil's index is a good index of inequality in disease and mortality burdens when multiple groups are being considered. It provides a summary measure of inequality across a set of demographic groups that may be tracked over time. Also, it is interesting because it is additive, and thus admits of simple decompositions. 
#'
#' The index measures discrepancies between a population's share of the disease burden, `omega`, and their share of the population, `eta`. A situation of zero inequality would imply that each population's share of cases is equal to its population share, or, `omega=eta`. Each population's contribution to total inequality is calculated as:
#' ```
#'              T_i = omega_i * [log(omega_i/eta_i)],
#' ```
#' the log-ratio of case-share to population-share, weighted by their share of cases. Theil's index for all areas is the sum of each area's T_i:
#' ```
#'              T = sum_(i=1)^n T_i.
#' ```
#' Theil's T is thus a weighted mean of log-ratios of case shares to population shares, where each log-ratio (which we may describe as a raw inequality score) is weighted by its share of total cases. The index has a minimum of zero and a maximum of `log(N)`, where `N` is the number of units (e.g., number of counties).

#' Theil's index is based on Shannon's information theory and Theil used it to study a variety of topics, including income inequality and racial segregation. Theil's index is often of great interest because it is additive across multiple scales, such as when the data has a nested structure to it (e.g., demographic groups within states). 
#'
#' @source
#'
#' Conceicao, P. and P. Ferreira (2000). The young person's guide to the Theil Index: Suggesting intuitive interpretations and exploring analytical applications. University of Texas Inequality Project. UTIP Working Paper Number 14. Accessed May 1, 2021 from \url{https://utip.gov.utexas.edu/papers.html}
#'
#' Conceicao, P, Galbraith, JK, Bradford, P. (2001). The Theil Index in sequences of nested and hierarchic grouping structures: implications for the measurement of inequality through time, with data aggregated at different levels of industrial classification. *Eastern Economic Journal*. 27(4): 491-514.
#' 
#' Theil, Henri (1972). *Statistical Decomposition Analysis.* Amsterdan, The Netherlands and London, UK: North-Holland Publishing Company.
#'
#' Shannon, Claude E. and Weaver, Warren (1963). *The Mathematical Theory of Communication*. Urbana and Chicago, USA: University if Illinois Press.
#'
#' @seealso \code{\link[surveil]{plot.theil}} \code{\link[surveil]{print.theil}} \code{\link[surveil]{plot.theil_list}}
#' 
#' @export
#' @md
theil <- function(x) {
    UseMethod("theil", x)
}


#' Theil's inequality index
#' 
#' @return
#' ### theil.surveil
#' 
#' A named list with the following elements: \describe{
#'
#' \item{summary}{ A `data.frame` summarizing the posterior probability distribution for Theil's T, including the mean and 95 percent credible interval for each time period}
#' \item{samples}{A `data.frame` with MCMC samples for Theil's T}
#' }
#' 
#' @rdname theil
#' @method theil surveil
#' @importFrom tidybayes mean_qi gather_draws
#' @importFrom dplyr `%>%` distinct select inner_join left_join mutate group_by ungroup summarise
#' @md
#' @export
theil.surveil <- function(x) {
    if (inherits(x$group, "NULL")) stop("There is no grouping variable stored in x$group but the purpose of Theil's T is to measure inequality across group.")
    
    group.df <- x$group$group.df
    group.df$group.index <- as.integer(group.df$group.index)
    time.var <- unique(x$summary$time)
    time.index <- 1:length(time.var)
    time.df <- data.frame(time = time.var, time.index = time.index)
    
    names(x$summary)[grep(x$group$group, names(x$summary))] <- "label"    
    pop.df <- dplyr::distinct(x$summary, time, label, Population) %>%
        dplyr::left_join(group.df, by = "label") %>%
        dplyr::left_join(time.df, by = "time")
    suppressMessages(
        theil.samples <- x$samples %>%
            tidybayes::gather_draws(rate[group.index, time.index]) %>%
            dplyr::select(group.index, time.index, .draw, .value) %>%
            dplyr::inner_join(pop.df, by = c("time.index", "group.index")) %>%
            dplyr::mutate(Count = .value * Population) %>%
            dplyr::ungroup() %>%
            dplyr::group_by(time, .draw) %>%    
            dplyr::summarise(Theil = theil2(Count = Count, Population = Population)) %>%
            dplyr::ungroup()          
    )
    theil.df <- theil.samples %>%
        dplyr::group_by(time) %>%
        tidybayes::mean_qi(Theil)
    res <- list(summary = theil.df,
                samples = theil.samples,
                groups = x$group$group.df$label,
                group_var = x$group$group)
    class(res) <- append("theil", class(res))
    return (res)
}


#' Theil index
#'
#' 
#' @return
#' ### theil.list
#'
#' An object of class `theil_list` and `tbl_df` containing MCMC samples for Theil's index at each time period. Columns are: \describe{
#' \item{time}{Time period indicator}
#' \item{.draw}{An id for each MCMC sample; note that samples are from the joint distribution}
#' \item{Theil_between}{The between-geographies component of Thiel's index}
#' \item{Theil_within}{The within-geographies component of Theil's index}
#' \item{Theil}{Theil's indequality index (T = Between + Within)}.
#' }
#'
#' @export
#' @md
#' @method theil list
#' @rdname theil
#' @importFrom dplyr bind_rows inner_join `%>%` ungroup group_by mutate summarise
theil.list <- function(x) {
    stopifnot(all(unlist(lapply(x, function(xi) inherits(xi, "surveil")))))
    geog.pop.list <- lapply(x, function(x) {
    aggregate(Population ~ time, FUN = sum, x$summary)
    })
    geog.pop.df <- dplyr::bind_rows(geog.pop.list, .id = "geog")
    tw.i.list <- lapply(x, function(x) theil(x)$samples)
    tw.i.df <- dplyr::bind_rows(tw.i.list, .id = "geog")
    cases.list <- lapply(x, make_cases)
    cases.df <- dplyr::bind_rows(cases.list, .id = "geog")

   theil.df <- cases.df %>%
       dplyr::inner_join(tw.i.df, by = c("geog", "time", ".draw")) %>%    
       dplyr::inner_join(geog.pop.df, by = c("geog", "time")) %>%
       dplyr::ungroup() %>%
       dplyr::group_by(time, .draw) %>%
       dplyr::mutate(total.count = sum(Count),
                     total.pop = sum(Population)
                     ) %>%
       dplyr::mutate(omega = Count / total.count,
                     eta = Population / total.pop,
                     T_between_contribution = omega * log(omega / eta),
                     T_within_contribution = omega * Theil) %>%
       dplyr::summarise(
                  Theil_between = sum(T_between_contribution),
                  Theil_within = sum(T_within_contribution),
                  ) %>%
       dplyr::mutate(Theil = Theil_between + Theil_within) %>%
       dplyr::ungroup() 
    out <- theil.df
    class(out) <- append("theil_list", class(out))
    return (out)    
}

#' @noRd
#' @importFrom dplyr distinct `%>%` left_join mutate select inner_join ungroup group_by
#' @importFrom tidybayes gather_draws
make_cases <- function(x) {
    stopifnot(inherits(x, "surveil"))
    group.df <- x$group$group.df
    group.df$group.index <- as.integer(group.df$group.index)
    time.var <- unique(x$summary$time)
    time.index <- 1:length(time.var)
    time.df <- data.frame(time = time.var, time.index = time.index)    
    names(x$summary)[grep(x$group$group, names(x$summary))] <- "label"    
    pop.df <- dplyr::distinct(x$summary, time, label, Population) %>%
        dplyr::left_join(group.df, by = "label") %>%
        dplyr::left_join(time.df, by = "time") %>%
        dplyr::mutate(group.index = as.integer(group.index))            
    cases.samples <- x$samples %>%
        tidybayes::gather_draws(rate[group.index, time.index]) %>%
        dplyr::select(group.index, time.index, .draw, .value) %>%
        dplyr::inner_join(pop.df, by = c("time.index", "group.index")) %>%
        dplyr::mutate(Count = .value * Population) %>%
        dplyr::ungroup() %>%
        dplyr::group_by(time, .draw) %>%
        dplyr::mutate(Count = sum(Count)) %>% # count.per.geog
        dplyr::ungroup() %>%
        select(time, .draw, Count)
    return (cases.samples)
    }



#' Plot theil's index
#' 
#' @export
#' @md
#' @param x An object of class `theil`, as created by calling \code{\link[surveil]{theil}} on a fitted `surveil` model.
#' @param fill Fill and line color
#' @param scale Multiply Theil's T by `scale` for readability
#' @param labels X-axis labels (time periods)
#' @return A `ggplot`
#' @examples
#'  \dontrun{
#'  dfw <- msa[grep("Dallas", msa$MSA), ]
#'  fit <- stan_rw(dfw, time = Year, group = Race)
#'  theil.dfw <- theil(fit)
#'  plot(theil.dfw)
#' }
#' @method plot theil
#' @import ggplot2
plot.theil <- function(x, col = "black", fill = "gray80", scale = 100, labels = x$summary$time) {
        ggplot(x$summary) +
        geom_ribbon(
            aes(time,
                ymin= scale * .lower,
                ymax= scale * .upper),
            fill = fill,
            alpha = 0.5
        ) +
        geom_line(aes(time, scale * Theil),
                  col = col,                
                  lwd = 0.75
                  ) +
        scale_x_continuous(
            name = NULL
        ) +
        scale_y_continuous(name = paste0("Theil x ", scale)) +
        theme_classic() 
}


#' print Theil's index
#' @param scale Scale Theil's index by `scale`
#' @method print theil
#' @importFrom scales comma percent
#' @export
print.theil <- function(x, scale = 100) {    
    message("Summary of Theil's Inequality Index")    
    message("Groups: ", paste(x$groups, collapse = ", "))
    message("Time periods observed: ", length(x$summary$time))
    pdf <- as.data.frame(x$summary)
    pdf <- pdf[,c("time", "Theil", ".lower", ".upper")]
    if (scale != 1) {
        pdf$Theil <- pdf$Theil * scale
        pdf$.lower <- pdf$.lower * scale
        pdf$.upper <- pdf$.upper * scale
        message("Theil's T (times ", scale, ") with 95% credible intervals")
    } else {
        message("Theil's T with 95% credible intervals")
    }
    print(pdf, digits = 3, row.names = FALSE)
}

#' Plot theil's index for nested data
#'
#' @description Plot the between geography, within geography, and total (Total = Between + Within) inequality as measured by Theil's index.
#' 
#' @param x An object of class `theil_list`, as created by calling \code{\link[surveil]{theil}} on a list of fitted `surveil` models.
#' @param color Line color
#' @param fill Fill color for credible intervals
#' @param alpha Transparency of credible interval fill color
#' @param scale Multiply Theil's T by `scale` for readability
#' @param plot If `FALSE`, return a list of `ggplot`s.
#' @param base_size Passed to `theme_classic` to control size of plot elements (e.g., text)
#' 
#' @return If `plot = FALSE`, returns a list of `ggplot`s; otherwise, the `ggplots` will be drawn to the current plotting device using \code{\link[gridExtra]{grid.arrange}}.
#'
#' @method plot theil_list
#' @import ggplot2
#' @importFrom tidybayes mean_qi
#' @importFrom dplyr `%>%` group_by mutate summarise 
#' @importFrom gridExtra grid.arrange
#' @seealso \code{\link[surveil]{theil}}
#' @export
#' @md
plot.theil_list <- function(x,
                            col = "black",
                            fill = "black",
                            alpha = 0.25,
                            between_title = "Between",
                            within_title = "Within",
                            total_title = "Total",
                            scale = 100,
                            plot = TRUE,
                            base_size = 14) {
    if (scale != 1) message("y-axis scale is T times ", scale)
    t_total_df <- x %>%
        dplyr::group_by(time) %>%
        dplyr::mutate(Theil = Theil * scale) %>%
        tidybayes::mean_qi(Theil)
    max.val <- t_total_df %>%
        summarise(max.val = max(.upper))
    max.val <- as.numeric(max.val) 
    ## between geography inequality
    g1 <- x %>%
        dplyr::group_by(time) %>%
        dplyr::mutate(Theil = Theil_between * scale) %>%
        tidybayes::mean_qi(Theil) %>%
        ggplot(aes(time, Theil)) +
        geom_line(col = col) +
        geom_ribbon(aes(ymin = .lower, ymax = .upper),
                    alpha = alpha,
                    fill = fill
                    ) +
        scale_y_continuous(name = NULL, limits = c(0, max.val)) +
        labs(subtitle = between_title, x  = NULL) +
        theme_classic(base_size = base_size) 
    ## within geography inequality
    g2 <- x %>%
        dplyr::group_by(time) %>%
        dplyr::mutate(Theil = Theil_within * scale) %>%
        tidybayes::mean_qi(Theil) %>%
        ggplot(aes(time, Theil)) +
        geom_line(col = col) +
        geom_ribbon(aes(ymin = .lower, ymax = .upper),
                    alpha = alpha,
                    fill = fill
                    ) +
        scale_y_continuous(name = NULL, limits = c(0, max.val)) +
        labs(
            subtitle = within_title,
            x = NULL
        ) +
        theme_classic(base_size = base_size)  
    ## total inequality
    g3 <- t_total_df %>%
        ggplot(aes(time, Theil)) +
        geom_line(col = col) +
        geom_ribbon(aes(ymin = .lower, ymax = .upper),
                    alpha = alpha,
                    fill = fill
                    ) +
        scale_y_continuous(name = NULL, limits = c(0, max.val)) +
        labs(subtitle = total_title, x  = NULL) +
        theme_classic(base_size = base_size) 
    if (!plot) {
        glist <- list(between = g1, within = g2, total = g3)
        return (glist)
    } else {
        gridExtra::grid.arrange(g1, g2, g3, nrow = 1)
    }
}

