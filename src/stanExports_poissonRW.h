// Generated by rstantools.  Do not edit by hand.

/*
    surveil is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    surveil is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with surveil.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_poissonRW_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_poissonRW");
    reader.add_event(43, 41, "end", "model_poissonRW");
    return reader;
}
#include <stan_meta_header.hpp>
class model_poissonRW
  : public stan::model::model_base_crtp<model_poissonRW> {
private:
        int TT;
        int K;
        std::vector<std::vector<int> > y;
        std::vector<vector_d> log_E;
        vector_d prior_eta_1_df;
        vector_d prior_eta_1_location;
        vector_d prior_eta_1_scale;
        vector_d prior_sigma_df;
        vector_d prior_sigma_location;
        vector_d prior_sigma_scale;
public:
    model_poissonRW(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_poissonRW(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_poissonRW_namespace::model_poissonRW";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "TT", "int", context__.to_vec());
            TT = int(0);
            vals_i__ = context__.vals_i("TT");
            pos__ = 0;
            TT = vals_i__[pos__++];
            check_greater_or_equal(function__, "TT", TT, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 5;
            validate_non_negative_index("y", "K", K);
            validate_non_negative_index("y", "TT", TT);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(K,TT));
            y = std::vector<std::vector<int> >(K, std::vector<int>(TT, int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = K;
            size_t y_k_1_max__ = TT;
            for (size_t k_1__ = 0; k_1__ < y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("log_E", "TT", TT);
            validate_non_negative_index("log_E", "K", K);
            context__.validate_dims("data initialization", "log_E", "vector_d", context__.to_vec(K,TT));
            log_E = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(TT));
            vals_r__ = context__.vals_r("log_E");
            pos__ = 0;
            size_t log_E_j_1_max__ = TT;
            size_t log_E_k_0_max__ = K;
            for (size_t j_1__ = 0; j_1__ < log_E_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < log_E_k_0_max__; ++k_0__) {
                    log_E[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("prior_eta_1_df", "K", K);
            context__.validate_dims("data initialization", "prior_eta_1_df", "vector_d", context__.to_vec(K));
            prior_eta_1_df = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("prior_eta_1_df");
            pos__ = 0;
            size_t prior_eta_1_df_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < prior_eta_1_df_j_1_max__; ++j_1__) {
                prior_eta_1_df(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("prior_eta_1_location", "K", K);
            context__.validate_dims("data initialization", "prior_eta_1_location", "vector_d", context__.to_vec(K));
            prior_eta_1_location = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("prior_eta_1_location");
            pos__ = 0;
            size_t prior_eta_1_location_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < prior_eta_1_location_j_1_max__; ++j_1__) {
                prior_eta_1_location(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("prior_eta_1_scale", "K", K);
            context__.validate_dims("data initialization", "prior_eta_1_scale", "vector_d", context__.to_vec(K));
            prior_eta_1_scale = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("prior_eta_1_scale");
            pos__ = 0;
            size_t prior_eta_1_scale_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < prior_eta_1_scale_j_1_max__; ++j_1__) {
                prior_eta_1_scale(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("prior_sigma_df", "K", K);
            context__.validate_dims("data initialization", "prior_sigma_df", "vector_d", context__.to_vec(K));
            prior_sigma_df = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("prior_sigma_df");
            pos__ = 0;
            size_t prior_sigma_df_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < prior_sigma_df_j_1_max__; ++j_1__) {
                prior_sigma_df(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("prior_sigma_location", "K", K);
            context__.validate_dims("data initialization", "prior_sigma_location", "vector_d", context__.to_vec(K));
            prior_sigma_location = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("prior_sigma_location");
            pos__ = 0;
            size_t prior_sigma_location_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < prior_sigma_location_j_1_max__; ++j_1__) {
                prior_sigma_location(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("prior_sigma_scale", "K", K);
            context__.validate_dims("data initialization", "prior_sigma_scale", "vector_d", context__.to_vec(K));
            prior_sigma_scale = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("prior_sigma_scale");
            pos__ = 0;
            size_t prior_sigma_scale_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < prior_sigma_scale_j_1_max__; ++j_1__) {
                prior_sigma_scale(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 16;
            validate_non_negative_index("eta", "TT", TT);
            validate_non_negative_index("eta", "K", K);
            num_params_r__ += (TT * K);
            current_statement_begin__ = 17;
            validate_non_negative_index("sigma", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_poissonRW() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 16;
        if (!(context__.contains_r("eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta");
        pos__ = 0U;
        validate_non_negative_index("eta", "TT", TT);
        validate_non_negative_index("eta", "K", K);
        context__.validate_dims("parameter initialization", "eta", "vector_d", context__.to_vec(K,TT));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > eta(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(TT));
        size_t eta_j_1_max__ = TT;
        size_t eta_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                eta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t eta_i_0_max__ = K;
        for (size_t i_0__ = 0; i_0__ < eta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(eta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "K", K);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(K);
        size_t sigma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 16;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > eta;
            size_t eta_d_0_max__ = K;
            eta.reserve(eta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    eta.push_back(in__.vector_constrain(TT, lp__));
                else
                    eta.push_back(in__.vector_constrain(TT));
            }
            current_statement_begin__ = 17;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, K, lp__);
            else
                sigma = in__.vector_lb_constrain(0, K);
            // transformed parameters
            current_statement_begin__ = 21;
            validate_non_negative_index("mu", "TT", TT);
            validate_non_negative_index("mu", "K", K);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > mu(K, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(TT));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 22;
            for (int j = 1; j <= K; ++j) {
                current_statement_begin__ = 22;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            add(get_base1(log_E, j, "log_E", 1), get_base1(eta, j, "eta", 1)), 
                            "assigning variable mu");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 21;
            size_t mu_k_0_max__ = K;
            size_t mu_j_1_max__ = TT;
            for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(mu[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 26;
            lp_accum__.add(student_t_log(sigma, prior_sigma_df, prior_sigma_location, prior_sigma_scale));
            current_statement_begin__ = 27;
            for (int j = 1; j <= K; ++j) {
                current_statement_begin__ = 28;
                lp_accum__.add(poisson_log_log(get_base1(y, j, "y", 1), get_base1(mu, j, "mu", 1)));
                current_statement_begin__ = 29;
                lp_accum__.add(student_t_log(get_base1(get_base1(eta, j, "eta", 1), 1, "eta", 2), get_base1(prior_eta_1_df, j, "prior_eta_1_df", 1), get_base1(prior_eta_1_location, j, "prior_eta_1_location", 1), get_base1(prior_eta_1_scale, j, "prior_eta_1_scale", 1)));
                current_statement_begin__ = 30;
                lp_accum__.add(normal_log(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(2, TT), stan::model::nil_index_list())), "eta"), stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_min_max(1, (TT - 1)), stan::model::nil_index_list())), "eta"), get_base1(sigma, j, "sigma", 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("eta");
        names__.push_back("sigma");
        names__.push_back("mu");
        names__.push_back("rate");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(TT);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(TT);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(TT);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(TT);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_poissonRW_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > eta;
        size_t eta_d_0_max__ = K;
        eta.reserve(eta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < eta_d_0_max__; ++d_0__) {
            eta.push_back(in__.vector_constrain(TT));
        }
        size_t eta_j_1_max__ = TT;
        size_t eta_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                vars__.push_back(eta[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, K);
        size_t sigma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 21;
            validate_non_negative_index("mu", "TT", TT);
            validate_non_negative_index("mu", "K", K);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > mu(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(TT));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 22;
            for (int j = 1; j <= K; ++j) {
                current_statement_begin__ = 22;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            add(get_base1(log_E, j, "log_E", 1), get_base1(eta, j, "eta", 1)), 
                            "assigning variable mu");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_j_1_max__ = TT;
                size_t mu_k_0_max__ = K;
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                        vars__.push_back(mu[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 35;
            validate_non_negative_index("rate", "TT", TT);
            validate_non_negative_index("rate", "K", K);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > rate(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(TT));
            stan::math::initialize(rate, DUMMY_VAR__);
            stan::math::fill(rate, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("log_lik", "TT", TT);
            validate_non_negative_index("log_lik", "K", K);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > log_lik(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(TT));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 37;
            for (int j = 1; j <= K; ++j) {
                current_statement_begin__ = 38;
                stan::model::assign(rate, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            stan::math::exp(get_base1(eta, j, "eta", 1)), 
                            "assigning variable rate");
                current_statement_begin__ = 39;
                for (int t = 1; t <= TT; ++t) {
                    current_statement_begin__ = 39;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                poisson_log_log(get_base1(get_base1(y, j, "y", 1), t, "y", 2), get_base1(get_base1(mu, j, "mu", 1), t, "mu", 2)), 
                                "assigning variable log_lik");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 35;
            size_t rate_j_1_max__ = TT;
            size_t rate_k_0_max__ = K;
            for (size_t j_1__ = 0; j_1__ < rate_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                    vars__.push_back(rate[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 36;
            size_t log_lik_j_1_max__ = TT;
            size_t log_lik_k_0_max__ = K;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                    vars__.push_back(log_lik[k_0__](j_1__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_poissonRW";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_j_1_max__ = TT;
        size_t eta_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = TT;
            size_t mu_k_0_max__ = K;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t rate_j_1_max__ = TT;
        size_t rate_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < rate_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rate" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_1_max__ = TT;
        size_t log_lik_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t eta_j_1_max__ = TT;
        size_t eta_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t sigma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_j_1_max__ = TT;
            size_t mu_k_0_max__ = K;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < mu_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t rate_j_1_max__ = TT;
        size_t rate_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < rate_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rate" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_1_max__ = TT;
        size_t log_lik_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_poissonRW_namespace::model_poissonRW stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
